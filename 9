from sentence_transformers import SentenceTransformer
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Sample dataset
documents = [
    "Artificial intelligence is transforming the technology landscape",
    "Machine learning algorithms can identify patterns in data",
    "Neural networks are inspired by biological brain structures",
    "Deep learning has revolutionized computer vision tasks",
    "Natural language processing helps computers understand human language",
    "Robotics combines AI with physical systems",
    "Data science involves analyzing large datasets",
    "Computer vision enables machines to interpret visual information",
    "Reinforcement learning allows agents to learn from experience",
    "Cloud computing provides scalable computing resources"
]

class SemanticSearch:
    def __init__(self, documents):
        self.documents = documents
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        self.document_embeddings = self.model.encode(documents)
    
    def search(self, query, top_k=3):
        # Generate embedding for the query
        query_embedding = self.model.encode([query])
        
        # Calculate similarity scores
        similarities = cosine_similarity(query_embedding, self.document_embeddings)[0]
        
        # Get top k results
        top_indices = similarities.argsort()[-top_k:][::-1]
        
        results = []
        for idx in top_indices:
            results.append({
                'document': self.documents[idx],
                'similarity': similarities[idx]
            })
        
        return results

# Create search engine instance
search_engine = SemanticSearch(documents)

# Example searches
queries = [
    "How do computers process human language?",
    "What is the relationship between AI and robots?",
    "How does machine learning work with data?"
]

for query in queries:
    print(f"\nQuery: {query}")
    results = search_engine.search(query)
    for i, result in enumerate(results, 1):
        print(f"{i}. {result['document']}")
        print(f"   Similarity: {result['similarity']:.3f}")
